From: uazo <uazo@users.noreply.github.com>
Date: Sun, 24 Oct 2021 16:54:04 +0000
Subject: Enable native Android autofill

There are 2 different types of autofill: one managed via GCM and the
native Android one that uses the provider assigned by the user
(which can be any user installed app like Bitwarden for example).
In chromium GCM is active while in the WebView the latter.
This patch uses WebView code to enable native Android autofill
along with browser-managed autofill.
A separate toggle is introduced to enable autofill in incognito mode.

See also: https://github.com/bromite/bromite/issues/547

Original License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html
License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---
 android_webview/browser/aw_contents.cc        |  3 +-
 chrome/android/BUILD.gn                       |  1 +
 .../settings/PasswordSettings.java            | 81 ++++++++++++++++++-
 .../chromium/chrome/browser/tab/TabImpl.java  | 51 ++++++++++++
 .../browser/tab/TabViewAndroidDelegate.java   | 14 ++++
 chrome/browser/BUILD.gn                       |  7 ++
 chrome/browser/android/tab_android.cc         | 15 ++++
 chrome/browser/android/tab_android.h          |  2 +
 .../strings/android_chrome_strings.grd        |  6 ++
 .../ui/autofill/chrome_autofill_client.cc     |  8 +-
 .../browser/android_autofill_manager.cc       |  2 +-
 .../browser/android_autofill_manager.h        |  4 +-
 .../browser/content_autofill_driver.cc        | 50 ++++++++++++
 .../content/browser/content_autofill_driver.h |  9 ++-
 .../content_autofill_driver_factory.cc        | 11 ++-
 .../browser/content_autofill_driver_factory.h |  1 +
 .../renderer/password_autofill_agent.cc       |  5 +-
 .../autofill/core/common/autofill_prefs.cc    |  6 ++
 .../autofill/core/common/autofill_prefs.h     |  2 +
 .../embedder_support/view/ContentView.java    | 46 +++++++++++
 .../chromium/ui/base/ViewAndroidDelegate.java |  8 ++
 21 files changed, 323 insertions(+), 9 deletions(-)

diff --git a/android_webview/browser/aw_contents.cc b/android_webview/browser/aw_contents.cc
--- a/android_webview/browser/aw_contents.cc
+++ b/android_webview/browser/aw_contents.cc
@@ -214,7 +214,8 @@ AwBrowserPermissionRequestDelegate* AwBrowserPermissionRequestDelegate::FromID(
 AwSafeBrowsingUIManager::UIManagerClient*
 AwSafeBrowsingUIManager::UIManagerClient::FromWebContents(
     WebContents* web_contents) {
-  return AwContents::FromWebContents(web_contents);
+  return AwContents::FromWebContents(web_contents,
+                                /*enable_secondary_autofill_manager*/ false);
 }
 
 // static
diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -392,6 +392,7 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/ui/android/favicon:java",
       "//chrome/browser/ui/android/layouts:java",
       "//chrome/browser/ui/android/layouts/glue:java",
+    "//components/android_autofill/browser:java",
       "//chrome/browser/ui/android/logo:java",
       "//chrome/browser/ui/android/management:java",
       "//chrome/browser/ui/android/multiwindow:java",
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
@@ -60,6 +60,11 @@ import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.Locale;
 
+import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
+import org.chromium.chrome.browser.ui.messages.snackbar.INeedSnackbarManager;
+import org.chromium.chrome.browser.ui.messages.snackbar.Snackbar;
+import org.chromium.chrome.browser.ApplicationLifetime;
+
 /**
  * The "Passwords" screen in Settings, which allows the user to enable or disable password saving,
  * to view saved passwords (just the username and URL), and to delete saved passwords.
@@ -67,7 +72,7 @@ import java.util.Locale;
 public class PasswordSettings extends PreferenceFragmentCompat
         implements PasswordListObserver, Preference.OnPreferenceClickListener,
                    SyncService.SyncStateChangedListener, FragmentHelpAndFeedbackLauncher,
-                   ProfileDependentSetting {
+                   ProfileDependentSetting, INeedSnackbarManager {
     @IntDef({TrustedVaultBannerState.NOT_SHOWN, TrustedVaultBannerState.OFFER_OPT_IN,
             TrustedVaultBannerState.OPTED_IN})
     @Retention(RetentionPolicy.SOURCE)
@@ -94,6 +99,12 @@ public class PasswordSettings extends PreferenceFragmentCompat
     public static final String PREF_TRUSTED_VAULT_BANNER = "trusted_vault_banner";
     public static final String PREF_KEY_MANAGE_ACCOUNT_LINK = "manage_account_link";
 
+    public static final String PREF_ANDROID_AUTOFILL_SWITCH = "android_autofill_switch";
+    public static final String PREF_ANDROID_AUTOFILL_INCOGNITO_SWITCH = "android_autofill_incognito_switch";
+
+    private SnackbarManager mSnackbarManager;
+    private Snackbar mSnackbar;
+
     private static final String PREF_KEY_CATEGORY_SAVED_PASSWORDS = "saved_passwords";
     private static final String PREF_KEY_CATEGORY_EXCEPTIONS = "exceptions";
     private static final String PREF_KEY_SAVED_PASSWORDS_NO_TEXT = "saved_passwords_no_text";
@@ -129,6 +140,8 @@ public class PasswordSettings extends PreferenceFragmentCompat
     private Preference mLinkPref;
     private Menu mMenu;
 
+    private ChromeSwitchPreference mEnableAndroidAutofillSwitch;
+    private ChromeSwitchPreference mEnableAndroidAutofillIncognitoSwitch;
     private @ManagePasswordsReferrer int mManagePasswordsReferrer;
     private HelpAndFeedbackLauncher mHelpAndFeedbackLauncher;
     private Profile mProfile;
@@ -304,6 +317,7 @@ public class PasswordSettings extends PreferenceFragmentCompat
         }
 
         createSavePasswordsSwitch();
+        createEnableAndroidAutofillSwitch();
         createAutoSignInCheckbox();
 
         if (mTrustedVaultBannerState == TrustedVaultBannerState.OPTED_IN) {
@@ -557,6 +571,71 @@ public class PasswordSettings extends PreferenceFragmentCompat
                 getPrefService().getBoolean(Pref.CREDENTIALS_ENABLE_SERVICE));
     }
 
+    private void createEnableAndroidAutofillSwitch() {
+        if (mSnackbar == null) {
+            mSnackbar = Snackbar.make(getActivity().getString(R.string.ui_relaunch_notice),
+                    new SnackbarManager.SnackbarController() {
+                            @Override
+                            public void onDismissNoAction(Object actionData) { }
+
+                            @Override
+                            public void onAction(Object actionData) {
+                                ApplicationLifetime.terminate(true);
+                            }
+                    }, Snackbar.TYPE_NOTIFICATION, Snackbar.UMA_UNKNOWN)
+                    .setSingleLine(false)
+                    .setAction(getActivity().getString(R.string.relaunch),
+                            /*actionData*/null)
+                    .setDuration(/*durationMs*/70000);
+        }
+
+        mEnableAndroidAutofillSwitch = new ChromeSwitchPreference(getStyledContext(), null);
+        mEnableAndroidAutofillSwitch.setKey(PREF_ANDROID_AUTOFILL_SWITCH);
+        mEnableAndroidAutofillSwitch.setTitle(R.string.enable_android_autofill);
+        mEnableAndroidAutofillSwitch.setOrder(ORDER_SWITCH);
+        mEnableAndroidAutofillSwitch.setSummaryOn(R.string.text_on);
+        mEnableAndroidAutofillSwitch.setSummaryOff(R.string.text_off);
+
+        try (StrictModeContext ignored = StrictModeContext.allowDiskReads()) {
+            getPreferenceScreen().addPreference(mEnableAndroidAutofillSwitch);
+        }
+
+        mEnableAndroidAutofillSwitch.setChecked(
+                getPrefService().getBoolean(Pref.AUTOFILL_ANDROID_ENABLED));
+
+        mEnableAndroidAutofillSwitch.setOnPreferenceChangeListener((preference, newValue) -> {
+            getPrefService().setBoolean(Pref.AUTOFILL_ANDROID_ENABLED, (boolean) newValue);
+            if (!mSnackbarManager.isShowing())
+                mSnackbarManager.showSnackbar(mSnackbar);
+            return true;
+        });
+
+        mEnableAndroidAutofillIncognitoSwitch = new ChromeSwitchPreference(getStyledContext(), null);
+        mEnableAndroidAutofillIncognitoSwitch.setKey(PREF_ANDROID_AUTOFILL_INCOGNITO_SWITCH);
+        mEnableAndroidAutofillIncognitoSwitch.setTitle(R.string.enable_android_autofill_incognito);
+        mEnableAndroidAutofillIncognitoSwitch.setOrder(ORDER_SWITCH);
+        mEnableAndroidAutofillIncognitoSwitch.setSummaryOn(R.string.text_on);
+        mEnableAndroidAutofillIncognitoSwitch.setSummaryOff(R.string.text_off);
+
+        try (StrictModeContext ignored = StrictModeContext.allowDiskReads()) {
+            getPreferenceScreen().addPreference(mEnableAndroidAutofillIncognitoSwitch);
+        }
+
+        mEnableAndroidAutofillIncognitoSwitch.setChecked(
+                getPrefService().getBoolean(Pref.AUTOFILL_ANDROID_INCOGNITO_ENABLED));
+
+        mEnableAndroidAutofillIncognitoSwitch.setOnPreferenceChangeListener((preference, newValue) -> {
+            getPrefService().setBoolean(Pref.AUTOFILL_ANDROID_INCOGNITO_ENABLED, (boolean) newValue);
+            if (!mSnackbarManager.isShowing())
+                mSnackbarManager.showSnackbar(mSnackbar);
+            return true;
+        });
+    }
+
+    public void setSnackbarManager(SnackbarManager manager) {
+        mSnackbarManager = manager;
+    }
+
     private void createAutoSignInCheckbox() {
         ChromeSwitchPreference autoSignInSwitch =
                 new ChromeSwitchPreference(getStyledContext(), null);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
@@ -76,6 +76,17 @@ import org.chromium.ui.base.WindowAndroid;
 import org.chromium.ui.util.ColorUtils;
 import org.chromium.url.GURL;
 
+import android.os.Build;
+import android.util.SparseArray;
+import org.chromium.ui.base.EventOffsetHandler;
+import android.view.ViewStructure;
+import android.view.autofill.AutofillValue;
+import org.chromium.components.autofill.AutofillProvider;
+import org.chromium.components.autofill.AutofillSelectionMenuItemProvider;
+import org.chromium.content_public.browser.SelectionPopupController;
+import org.chromium.chrome.browser.preferences.Pref;
+import org.chromium.components.user_prefs.UserPrefs;
+
 /**
  * Implementation of the interface {@link Tab}. Contains and manages a {@link ContentView}.
  * This class is not intended to be extended.
@@ -212,6 +223,8 @@ public class TabImpl implements Tab {
     private boolean mUsedCriticalPersistedTabData;
     private boolean mIsWebContentObscured;
 
+    AutofillProvider mAutofillProvider;
+
     /**
      * Creates an instance of a {@link TabImpl}.
      *
@@ -795,6 +808,11 @@ public class TabImpl implements Tab {
         for (TabObserver observer : mObservers) observer.onDestroyed(this);
         mObservers.clear();
 
+        if (mAutofillProvider != null) {
+            mAutofillProvider.destroy();
+            mAutofillProvider = null;
+        }
+
         mUserDataHost.destroy();
         mTabViewManager.destroy();
         hideNativePage(false, null);
@@ -1400,6 +1418,16 @@ public class TabImpl implements Tab {
         return tabsPtrArray;
     }
 
+    public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) {
+        if (mAutofillProvider != null)
+            mAutofillProvider.onProvideAutoFillVirtualStructure(structure, flags);
+    }
+
+    public void autofill(final SparseArray<AutofillValue> values) {
+        if (mAutofillProvider != null)
+            mAutofillProvider.autofill(values);
+    }
+
     /**
      * Initializes the {@link WebContents}. Completes the browser content components initialization
      * around a native WebContents pointer.
@@ -1449,6 +1477,28 @@ public class TabImpl implements Tab {
                             mDelegateFactory.createContextMenuPopulatorFactory(this), this));
 
             mWebContents.notifyRendererPreferenceUpdate();
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                boolean autofillEnabled = false;
+                if (isIncognito()) {
+                    autofillEnabled = UserPrefs.get(Profile.getLastUsedRegularProfile())
+                                               .getBoolean(Pref.AUTOFILL_ANDROID_INCOGNITO_ENABLED);
+                } else {
+                    autofillEnabled = UserPrefs.get(Profile.getLastUsedRegularProfile())
+                                               .getBoolean(Pref.AUTOFILL_ANDROID_ENABLED);
+                }
+
+                if (autofillEnabled) {
+                    SelectionPopupController selectionController =
+                            SelectionPopupController.fromWebContents(mWebContents);
+                    mAutofillProvider = new AutofillProvider(getContext(), cv, webContents, "bromite");
+                    TabImplJni.get().initializeAutofillIfNecessary(mNativeTabAndroid);
+                    mAutofillProvider.setWebContents(webContents);
+                    cv.setWebContents(webContents);
+                    selectionController.setNonSelectionAdditionalMenuItemProvider(
+                            new AutofillSelectionMenuItemProvider(
+                                    getContext(), mAutofillProvider));
+                }
+            }
             TabHelpers.initWebContentsHelpers(this);
             notifyContentChanged();
         } finally {
@@ -1790,6 +1840,7 @@ public class TabImpl implements Tab {
         void setActiveNavigationEntryTitleForUrl(long nativeTabAndroid, String url, String title);
         void loadOriginalImage(long nativeTabAndroid);
         boolean handleNonNavigationAboutURL(GURL url);
+        void initializeAutofillIfNecessary(long nativeTabAndroid);
         void onShow(long nativeTabAndroid);
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabViewAndroidDelegate.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabViewAndroidDelegate.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabViewAndroidDelegate.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabViewAndroidDelegate.java
@@ -22,6 +22,10 @@ import org.chromium.ui.dragdrop.DragAndDropBrowserDelegate;
 import org.chromium.ui.dragdrop.DragAndDropDelegate;
 import org.chromium.ui.dragdrop.DragStateTracker;
 
+import android.util.SparseArray;
+import android.view.autofill.AutofillValue;
+import android.view.ViewStructure;
+
 /**
  * Implementation of the abstract class {@link ViewAndroidDelegate} for Chrome.
  */
@@ -87,6 +91,16 @@ public class TabViewAndroidDelegate extends ViewAndroidDelegate {
         mTab.onBackgroundColorChanged(color);
     }
 
+    @Override
+    public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) {
+        mTab.onProvideAutofillVirtualStructure(structure, flags);
+    }
+
+    @Override
+    public void autofill(final SparseArray<AutofillValue> values) {
+        mTab.autofill(values);
+    }
+
     @Override
     public void onTopControlsChanged(
             int topControlsOffsetY, int contentOffsetY, int topControlsMinHeightOffsetY) {
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -2528,6 +2528,13 @@ static_library("browser") {
     deps += [ "//chrome/browser/error_reporting" ]
   }
 
+  if (is_android) {
+    deps += [
+        "//components/android_autofill/browser",
+        "//components/android_autofill/browser:android"
+    ]
+  }
+
   if (use_ozone) {
     deps += [
       "//ui/events/ozone",
diff --git a/chrome/browser/android/tab_android.cc b/chrome/browser/android/tab_android.cc
--- a/chrome/browser/android/tab_android.cc
+++ b/chrome/browser/android/tab_android.cc
@@ -68,6 +68,13 @@
 #include "url/android/gurl_android.h"
 #include "url/gurl.h"
 
+#include "components/android_autofill/browser/android_autofill_manager.h"
+#include "components/android_autofill/browser/autofill_provider.h"
+#include "components/android_autofill/browser/autofill_provider_android.h"
+#include "components/autofill/content/browser/content_autofill_driver_factory.h"
+#include "chrome/browser/ui/autofill/chrome_autofill_client.h"
+#include "chrome/browser/browser_process.h"
+
 using base::android::AttachCurrentThread;
 using base::android::ConvertUTF8ToJavaString;
 using base::android::JavaParamRef;
@@ -504,3 +511,11 @@ static void JNI_TabImpl_Init(JNIEnv* env, const JavaParamRef<jobject>& obj) {
   // This will automatically bind to the Java object and pass ownership there.
   new TabAndroid(env, obj);
 }
+
+void TabAndroid::InitializeAutofillIfNecessary(JNIEnv* env) {
+  if (!autofill::ContentAutofillDriverFactory::FromWebContents(
+          web_contents_.get())) {
+    content::WebContents* web_contents = web_contents_.get();
+    autofill::ChromeAutofillClient::CreateForWebContents(web_contents);
+  }
+}
diff --git a/chrome/browser/android/tab_android.h b/chrome/browser/android/tab_android.h
--- a/chrome/browser/android/tab_android.h
+++ b/chrome/browser/android/tab_android.h
@@ -167,6 +167,8 @@ class TabAndroid : public base::SupportsUserData {
 
   void SetDevToolsAgentHost(scoped_refptr<content::DevToolsAgentHost> host);
 
+  void InitializeAutofillIfNecessary(JNIEnv* env);
+
  private:
   JavaObjectWeakGlobalRef weak_java_tab_;
 
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -616,6 +616,12 @@ CHAR_LIMIT guidelines:
       <message name="IDS_PASSWORD_SETTINGS_SAVE_PASSWORDS" desc="Title for the checkbox toggling whether passwords are saved or not. [CHAR_LIMIT=32]">
         Save passwords
       </message>
+      <message name="IDS_ENABLE_ANDROID_AUTOFILL" desc="Title for the checkbox toggling whether enable Android native autofill or not. [CHAR_LIMIT=32]">
+        Enable native Android autofill
+      </message>
+      <message name="IDS_ENABLE_ANDROID_AUTOFILL_INCOGNITO" desc="Title for the checkbox toggling whether enable Android native autofill or not in incognito mode. [CHAR_LIMIT=32]">
+        Enable native Android autofill in incognito
+      </message>
       <message name="IDS_PASSWORDS_AUTO_SIGNIN_TITLE" desc="Title for checkbox to enable automatically signing the user in to websites">
         Auto Sign-in
       </message>
diff --git a/chrome/browser/ui/autofill/chrome_autofill_client.cc b/chrome/browser/ui/autofill/chrome_autofill_client.cc
--- a/chrome/browser/ui/autofill/chrome_autofill_client.cc
+++ b/chrome/browser/ui/autofill/chrome_autofill_client.cc
@@ -1188,7 +1188,13 @@ ChromeAutofillClient::ChromeAutofillClient(content::WebContents* web_contents)
           web_contents,
           base::BindRepeating(&BrowserDriverInitHook,
                               this,
-                              g_browser_process->GetApplicationLocale())),
+                              g_browser_process->GetApplicationLocale(),
+#if BUILDFLAG(IS_ANDROID)
+                              /*enable_secondary_autofill_manager*/ true
+#else
+                              /*enable_secondary_autofill_manager*/ false
+#endif
+                              )),
       content::WebContentsObserver(web_contents),
       log_manager_(
           // TODO(crbug.com/928595): Replace the closure with a callback to the
diff --git a/components/android_autofill/browser/android_autofill_manager.cc b/components/android_autofill/browser/android_autofill_manager.cc
--- a/components/android_autofill/browser/android_autofill_manager.cc
+++ b/components/android_autofill/browser/android_autofill_manager.cc
@@ -19,7 +19,7 @@ using base::TimeTicks;
 void AndroidDriverInitHook(AutofillClient* client,
                            ContentAutofillDriver* driver) {
   driver->set_autofill_manager(
-      base::WrapUnique(new AndroidAutofillManager(driver, client)));
+      base::WrapUnique(new AndroidAutofillManager(driver, client)), nullptr);
   driver->GetAutofillAgent()->SetUserGestureRequired(false);
   driver->GetAutofillAgent()->SetSecureContextRequired(true);
   driver->GetAutofillAgent()->SetFocusRequiresScroll(false);
diff --git a/components/android_autofill/browser/android_autofill_manager.h b/components/android_autofill/browser/android_autofill_manager.h
--- a/components/android_autofill/browser/android_autofill_manager.h
+++ b/components/android_autofill/browser/android_autofill_manager.h
@@ -85,12 +85,12 @@ class AndroidAutofillManager : public AutofillManager {
                          const FieldTypeGroup field_type_group,
                          const url::Origin& triggered_origin);
 
+  AndroidAutofillManager(AutofillDriver* driver, AutofillClient* client);
+
  protected:
   friend void AndroidDriverInitHook(AutofillClient* client,
                                     ContentAutofillDriver* driver);
 
-  AndroidAutofillManager(AutofillDriver* driver, AutofillClient* client);
-
   void OnFormSubmittedImpl(const FormData& form,
                            bool known_success,
                            mojom::SubmissionSource source) override;
diff --git a/components/autofill/content/browser/content_autofill_driver.cc b/components/autofill/content/browser/content_autofill_driver.cc
--- a/components/autofill/content/browser/content_autofill_driver.cc
+++ b/components/autofill/content/browser/content_autofill_driver.cc
@@ -400,6 +400,8 @@ void ContentAutofillDriver::FormsSeen(
          const std::vector<FormGlobalId>& removed_forms) {
         target->autofill_manager_->OnFormsSeen(WithNewVersion(updated_forms),
                                                removed_forms);
+        if (target->secondary_autofill_manager_)
+          target->secondary_autofill_manager_->OnFormsSeen(updated_forms, removed_forms);
       });
 }
 
@@ -427,6 +429,10 @@ void ContentAutofillDriver::FormSubmitted(
         }
         target->autofill_manager_->OnFormSubmitted(
             WithNewVersion(form), known_success, submission_source);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnFormSubmitted(
+            WithNewVersion(form), known_success, submission_source);
+        }
       });
 }
 
@@ -448,6 +454,10 @@ void ContentAutofillDriver::TextFieldDidChange(const FormData& raw_form,
          base::TimeTicks timestamp) {
         target->autofill_manager_->OnTextFieldDidChange(
             WithNewVersion(form), field, bounding_box, timestamp);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnTextFieldDidChange(
+            WithNewVersion(form), field, bounding_box, timestamp);
+        }
       });
 }
 
@@ -467,6 +477,10 @@ void ContentAutofillDriver::TextFieldDidScroll(const FormData& raw_form,
          const FormFieldData& field, const gfx::RectF& bounding_box) {
         target->autofill_manager_->OnTextFieldDidScroll(WithNewVersion(form),
                                                         field, bounding_box);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnTextFieldDidScroll(
+              WithNewVersion(form), field, bounding_box);
+        }
       });
 }
 
@@ -487,6 +501,10 @@ void ContentAutofillDriver::SelectControlDidChange(
          const FormFieldData& field, const gfx::RectF& bounding_box) {
         target->autofill_manager_->OnSelectControlDidChange(
             WithNewVersion(form), field, bounding_box);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnSelectControlDidChange(
+            WithNewVersion(form), field, bounding_box);
+        }
       });
 }
 
@@ -509,6 +527,10 @@ void ContentAutofillDriver::AskForValuesToFill(
          AutofillSuggestionTriggerSource trigger_source) {
         target->autofill_manager_->OnAskForValuesToFill(
             WithNewVersion(form), field, bounding_box, trigger_source);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnAskForValuesToFill(
+              WithNewVersion(form), field, bounding_box, trigger_source);
+        }
       });
 }
 
@@ -520,12 +542,16 @@ void ContentAutofillDriver::HidePopup() {
     DCHECK(!target->IsPrerendering())
         << "We should never affect UI while prerendering";
     target->autofill_manager_->OnHidePopup();
+    if (target->secondary_autofill_manager_)
+      target->secondary_autofill_manager_->OnHidePopup();
   });
 }
 
 void ContentAutofillDriver::FocusNoLongerOnFormCallback(
     bool had_interacted_form) {
   autofill_manager_->OnFocusNoLongerOnForm(had_interacted_form);
+  if (secondary_autofill_manager_)
+    secondary_autofill_manager_->OnFocusNoLongerOnForm(had_interacted_form);
 }
 
 void ContentAutofillDriver::FocusNoLongerOnForm(bool had_interacted_form) {
@@ -555,6 +581,10 @@ void ContentAutofillDriver::FocusOnFormField(const FormData& raw_form,
          const FormFieldData& field, const gfx::RectF& bounding_box) {
         target->autofill_manager_->OnFocusOnFormField(WithNewVersion(form),
                                                       field, bounding_box);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnFocusOnFormField(
+            WithNewVersion(form), field, bounding_box);
+        }
       });
 }
 
@@ -569,6 +599,10 @@ void ContentAutofillDriver::DidFillAutofillFormData(const FormData& raw_form,
          base::TimeTicks timestamp) {
         target->autofill_manager_->OnDidFillAutofillFormData(
             WithNewVersion(form), timestamp);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnDidFillAutofillFormData(
+            WithNewVersion(form), timestamp);
+        }
       });
 }
 
@@ -579,6 +613,8 @@ void ContentAutofillDriver::DidPreviewAutofillFormData() {
   autofill_router().DidPreviewAutofillFormData(
       this, [](ContentAutofillDriver* target) {
         target->autofill_manager_->OnDidPreviewAutofillFormData();
+        if (target->secondary_autofill_manager_)
+          target->secondary_autofill_manager_->OnDidPreviewAutofillFormData();
       });
 }
 
@@ -589,6 +625,8 @@ void ContentAutofillDriver::DidEndTextFieldEditing() {
   autofill_router().DidEndTextFieldEditing(
       this, [](ContentAutofillDriver* target) {
         target->autofill_manager_->OnDidEndTextFieldEditing();
+        if (target->secondary_autofill_manager_)
+          target->secondary_autofill_manager_->OnDidEndTextFieldEditing();
       });
 }
 
@@ -602,6 +640,10 @@ void ContentAutofillDriver::SelectFieldOptionsDidChange(
       [](ContentAutofillDriver* target, const FormData& form) {
         target->autofill_manager_->OnSelectFieldOptionsDidChange(
             WithNewVersion(form));
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnSelectFieldOptionsDidChange(
+            WithNewVersion(form));
+        }
       });
 }
 
@@ -621,6 +663,10 @@ void ContentAutofillDriver::JavaScriptChangedAutofilledValue(
          const FormFieldData& field, const std::u16string& old_value) {
         target->autofill_manager_->OnJavaScriptChangedAutofilledValue(
             WithNewVersion(form), field, old_value);
+        if (target->secondary_autofill_manager_) {
+          target->secondary_autofill_manager_->OnJavaScriptChangedAutofilledValue(
+            WithNewVersion(form), field, old_value);
+        }
       });
 }
 
@@ -628,6 +674,8 @@ void ContentAutofillDriver::OnContextMenuShownInFieldCallback(
     const FormGlobalId& form_global_id,
     const FieldGlobalId& field_global_id) {
   autofill_manager_->OnContextMenuShownInField(form_global_id, field_global_id);
+  if (secondary_autofill_manager_)
+    secondary_autofill_manager_->OnContextMenuShownInField(form_global_id, field_global_id);
 }
 
 void ContentAutofillDriver::OnContextMenuShownInField(
@@ -649,6 +697,8 @@ void ContentAutofillDriver::Reset() {
   owner_->autofill_router().UnregisterDriver(this,
                                              /*driver_is_dying=*/false);
   autofill_manager_->Reset();
+  if (secondary_autofill_manager_)
+    secondary_autofill_manager_->Reset();
 }
 
 const mojo::AssociatedRemote<mojom::AutofillAgent>&
diff --git a/components/autofill/content/browser/content_autofill_driver.h b/components/autofill/content/browser/content_autofill_driver.h
--- a/components/autofill/content/browser/content_autofill_driver.h
+++ b/components/autofill/content/browser/content_autofill_driver.h
@@ -126,10 +126,13 @@ class ContentAutofillDriver : public AutofillDriver,
   ContentAutofillDriver& operator=(const ContentAutofillDriver&) = delete;
   ~ContentAutofillDriver() override;
 
-  void set_autofill_manager(std::unique_ptr<AutofillManager> autofill_manager) {
+  void set_autofill_manager(std::unique_ptr<AutofillManager> autofill_manager,
+      std::unique_ptr<AutofillManager> secondary_autofill_manager) {
     autofill_manager_ = std::move(autofill_manager);
+    secondary_autofill_manager_ = std::move(secondary_autofill_manager);
   }
   AutofillManager* autofill_manager() { return autofill_manager_.get(); }
+  AutofillManager* secondary_autofill_manager() { return secondary_autofill_manager_.get(); }
 
   content::RenderFrameHost* render_frame_host() { return &*render_frame_host_; }
   const content::RenderFrameHost* render_frame_host() const {
@@ -336,6 +339,10 @@ class ContentAutofillDriver : public AutofillDriver,
 
   std::unique_ptr<AutofillManager> autofill_manager_ = nullptr;
 
+  // adds a reference for AndroidAutofillManager, since native autofill works in
+  // conjunction with browser autofill in Bromite
+  std::unique_ptr<AutofillManager> secondary_autofill_manager_ = nullptr;
+
   content::RenderWidgetHost::KeyPressEventCallback key_press_handler_;
 
   mojo::AssociatedReceiver<mojom::AutofillDriver> receiver_{this};
diff --git a/components/autofill/content/browser/content_autofill_driver_factory.cc b/components/autofill/content/browser/content_autofill_driver_factory.cc
--- a/components/autofill/content/browser/content_autofill_driver_factory.cc
+++ b/components/autofill/content/browser/content_autofill_driver_factory.cc
@@ -14,6 +14,7 @@
 #include "components/autofill/content/browser/content_autofill_driver.h"
 #include "components/autofill/core/browser/browser_autofill_manager.h"
 #include "components/autofill/core/common/autofill_features.h"
+#include "components/android_autofill/browser/android_autofill_manager.h"
 #include "content/public/browser/global_routing_id.h"
 #include "content/public/browser/navigation_handle.h"
 #include "content/public/browser/render_frame_host.h"
@@ -43,9 +44,17 @@ bool ShouldEnableHeavyFormDataScraping(const version_info::Channel channel) {
 
 void BrowserDriverInitHook(AutofillClient* client,
                            const std::string& app_locale,
+                           bool enable_secondary_autofill_manager,
                            ContentAutofillDriver* driver) {
+#if BUILDFLAG(IS_ANDROID)
   driver->set_autofill_manager(
-      std::make_unique<BrowserAutofillManager>(driver, client, app_locale));
+      std::make_unique<BrowserAutofillManager>(driver, client, app_locale),
+      enable_secondary_autofill_manager == false ? nullptr :
+        base::WrapUnique(new AndroidAutofillManager(driver, client)));
+#else
+  driver->set_autofill_manager(std::make_unique<BrowserAutofillManager>(
+      driver, client, app_locale), nullptr);
+#endif
   if (client && ShouldEnableHeavyFormDataScraping(client->GetChannel()))
     driver->GetAutofillAgent()->EnableHeavyFormDataScraping();
 }
diff --git a/components/autofill/content/browser/content_autofill_driver_factory.h b/components/autofill/content/browser/content_autofill_driver_factory.h
--- a/components/autofill/content/browser/content_autofill_driver_factory.h
+++ b/components/autofill/content/browser/content_autofill_driver_factory.h
@@ -35,6 +35,7 @@ class ContentAutofillDriver;
 // other implementations.
 void BrowserDriverInitHook(AutofillClient* client,
                            const std::string& app_locale,
+                           bool enable_secondary_autofill_manager,
                            ContentAutofillDriver* driver);
 
 // Manages lifetime of ContentAutofillDriver. Owned by ContentAutofillClient,
diff --git a/components/autofill/content/renderer/password_autofill_agent.cc b/components/autofill/content/renderer/password_autofill_agent.cc
--- a/components/autofill/content/renderer/password_autofill_agent.cc
+++ b/components/autofill/content/renderer/password_autofill_agent.cc
@@ -779,7 +779,10 @@ void PasswordAutofillAgent::UpdateStateForTextChange(
 
 void PasswordAutofillAgent::TrackAutofilledElement(
     const blink::WebFormControlElement& element) {
-  autofill_agent_->TrackAutofilledElement(element);
+  // fix for https://github.com/bromite/bromite/issues/1570
+  AutofillAgent* agent = autofill_agent_.get();
+  if (agent)
+    agent->TrackAutofilledElement(element);
 }
 
 void PasswordAutofillAgent::FillPasswordSuggestion(
diff --git a/components/autofill/core/common/autofill_prefs.cc b/components/autofill/core/common/autofill_prefs.cc
--- a/components/autofill/core/common/autofill_prefs.cc
+++ b/components/autofill/core/common/autofill_prefs.cc
@@ -126,6 +126,10 @@ const char kAutofillPaymentMethodsMandatoryReauthPromoShownCounter[] =
     "autofill.payment_methods_mandatory_reauth_promo_counter";
 #endif  // BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_ANDROID)
 
+// Boolean that is true to enable native Android Autofill
+const char kAutofillAndroidEnabled[] = "autofill.android_autofill_enabled";
+const char kAutofillAndroidIncognitoEnabled[] = "autofill.android_autofill_incognito_enabled";
+
 void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
   // Synced prefs. Used for cross-device choices, e.g., credit card Autofill.
   registry->RegisterBooleanPref(
@@ -158,6 +162,8 @@ void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
       prefs::kAutofillCreditCardFidoAuthOfferCheckboxState, true);
 #endif
   registry->RegisterBooleanPref(prefs::kAutofillWalletImportEnabled, true);
+  registry->RegisterBooleanPref(prefs::kAutofillAndroidEnabled, true);
+  registry->RegisterBooleanPref(prefs::kAutofillAndroidIncognitoEnabled, false);
   registry->RegisterIntegerPref(
       prefs::kAutofillLastVersionDisusedCreditCardsDeleted, 0);
   registry->RegisterIntegerPref(prefs::kAutocompleteLastVersionRetentionPolicy,
diff --git a/components/autofill/core/common/autofill_prefs.h b/components/autofill/core/common/autofill_prefs.h
--- a/components/autofill/core/common/autofill_prefs.h
+++ b/components/autofill/core/common/autofill_prefs.h
@@ -46,6 +46,8 @@ extern const char kAutofillUploadEvents[];
 extern const char kAutofillUploadEventsLastResetTimestamp[];
 extern const char kAutofillWalletImportEnabled[];
 extern const char kAutocompleteLastVersionRetentionPolicy[];
+extern const char kAutofillAndroidEnabled[];
+extern const char kAutofillAndroidIncognitoEnabled[];
 #if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_ANDROID)
 extern const char kAutofillPaymentMethodsMandatoryReauth[];
 extern const char kAutofillPaymentMethodsMandatoryReauthPromoShownCounter[];
diff --git a/components/embedder_support/android/java/src/org/chromium/components/embedder_support/view/ContentView.java b/components/embedder_support/android/java/src/org/chromium/components/embedder_support/view/ContentView.java
--- a/components/embedder_support/android/java/src/org/chromium/components/embedder_support/view/ContentView.java
+++ b/components/embedder_support/android/java/src/org/chromium/components/embedder_support/view/ContentView.java
@@ -38,6 +38,11 @@ import org.chromium.ui.base.EventForwarder;
 import org.chromium.ui.base.EventOffsetHandler;
 import org.chromium.ui.dragdrop.DragEventDispatchHelper.DragEventDispatchDestination;
 
+import org.chromium.base.Log;
+import android.util.SparseArray;
+import android.view.autofill.AutofillValue;
+import org.chromium.ui.base.ViewAndroidDelegate;
+
 /**
  * The containing view for {@link WebContents} that exists in the Android UI hierarchy and exposes
  * the various {@link View} functionality to it.
@@ -87,6 +92,8 @@ public class ContentView extends FrameLayout
      */
     public static ContentView createContentView(Context context,
             @Nullable EventOffsetHandler eventOffsetHandler, @Nullable WebContents webContents) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
+            return new ContentViewWithAutofill(context, eventOffsetHandler, webContents);
         return new ContentView(context, eventOffsetHandler, webContents);
     }
 
@@ -617,4 +624,43 @@ public class ContentView extends FrameLayout
         mDragDropEventOffsetHandler.onPostDispatchDragEvent(event.getAction());
         return ret;
     }
+
+    /**
+    * API level 26 implementation that includes autofill.
+    */
+    public static class ContentViewWithAutofill extends ContentView {
+        private ViewAndroidDelegate viewAndroidDelegate;
+
+        private ContentViewWithAutofill(Context context, EventOffsetHandler eventOffsetHandler, WebContents webContents) {
+            super(context, eventOffsetHandler, webContents);
+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                // The Autofill system-level infrastructure has heuristics for which Views it considers
+                // important for autofill; only these Views will be queried for their autofill
+                // structure on notifications that a new (virtual) View was entered. By default,
+                // FrameLayout is not considered important for autofill. Thus, for ContentView to be
+                // queried for its autofill structure, we must explicitly inform the autofill system
+                // that this View is important for autofill.
+                setImportantForAutofill(View.IMPORTANT_FOR_AUTOFILL_YES);
+            }
+        }
+
+        @Override
+        public void setWebContents(WebContents webContents) {
+            viewAndroidDelegate = webContents.getViewAndroidDelegate();
+            super.setWebContents(webContents);
+        }
+
+        @Override
+        public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) {
+            if (viewAndroidDelegate != null)
+                viewAndroidDelegate.onProvideAutofillVirtualStructure(structure, flags);
+        }
+
+        @Override
+        public void autofill(final SparseArray<AutofillValue> values) {
+            if (viewAndroidDelegate != null)
+                viewAndroidDelegate.autofill(values);
+        }
+    }
 }
diff --git a/ui/android/java/src/org/chromium/ui/base/ViewAndroidDelegate.java b/ui/android/java/src/org/chromium/ui/base/ViewAndroidDelegate.java
--- a/ui/android/java/src/org/chromium/ui/base/ViewAndroidDelegate.java
+++ b/ui/android/java/src/org/chromium/ui/base/ViewAndroidDelegate.java
@@ -29,6 +29,10 @@ import org.chromium.ui.dragdrop.DragStateTracker;
 import org.chromium.ui.dragdrop.DropDataAndroid;
 import org.chromium.ui.mojom.CursorType;
 
+import android.util.SparseArray;
+import android.view.autofill.AutofillValue;
+import android.view.ViewStructure;
+
 /**
  * Class to acquire, position, and remove anchor views from the implementing View.
  */
@@ -620,4 +624,8 @@ public class ViewAndroidDelegate {
     public static void setDragAndDropDelegateForTest(DragAndDropDelegate testDelegate) {
         sDragAndDropTestDelegate = testDelegate;
     }
+
+    public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) {}
+
+    public void autofill(final SparseArray<AutofillValue> values) {}
 }
--
2.25.1
