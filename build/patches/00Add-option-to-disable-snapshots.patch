From: uazo <uazo@users.noreply.github.com>
Date: Mon, 21 Aug 2023 14:03:25 +0000
Subject: Add option to disable snapshots

---
 .../tab_management/TabGridViewBinder.java     |  8 +++-
 .../java/res/xml/privacy_preferences.xml      |  5 +++
 .../chrome/browser/app/ChromeActivity.java    |  3 +-
 .../layouts/content/TabContentManager.java    |  7 +++-
 .../privacy/settings/PrivacySettings.java     | 42 ++++++++++++++++++-
 .../strings/android_chrome_strings.grd        |  8 ++++
 6 files changed, 67 insertions(+), 6 deletions(-)

diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java
@@ -314,8 +314,12 @@ class TabGridViewBinder {
                 updateThumbnailMatrix(thumbnail, result, thumbnailSize);
                 thumbnail.setImageBitmap(result);
             } else if (isMostRecentRequest) {
-                // If the most recent request is a null bitmap ensure a placeholder is visible.
-                thumbnail.setImageDrawable(null);
+                TabListFaviconProvider.TabFavicon tabFavicon = model.get(TabProperties.FAVICON);
+                if (tabFavicon != null) {
+                    thumbnail.setScaleType(ImageView.ScaleType.CENTER);
+                    thumbnail.setImageDrawable(
+                            isSelected ? tabFavicon.getSelectedDrawable() : tabFavicon.getDefaultDrawable());
+                }
             }
         };
         if (TabUiFeatureUtilities.isTabGroupsAndroidContinuationEnabled(view.getContext())
diff --git a/chrome/android/java/res/xml/privacy_preferences.xml b/chrome/android/java/res/xml/privacy_preferences.xml
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -88,6 +88,11 @@ found in the LICENSE file.
         android:title="@string/open_external_links_incognito_title"
         android:summary="@string/open_external_links_incognito_summary"
         android:defaultValue="false" />
+    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
+        android:key="tabgrid_use_icons"
+        android:title="@string/tabgrid_use_icons_title"
+        android:summary="@string/tabgrid_use_icons_summary"
+        android:defaultValue="false" />
     <Preference
         android:key="privacy_sandbox"
         android:title="@string/prefs_privacy_sandbox"
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -144,6 +144,7 @@ import org.chromium.chrome.browser.page_info.ChromePageInfoHighlight;
 import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomizations;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.printing.TabPrinter;
+import org.chromium.chrome.browser.privacy.settings.PrivacySettings;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.selection.SelectionPopupBackPressHandler;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
@@ -642,7 +643,7 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
 
             TabModelSelector tabModelSelector = mTabModelOrchestrator.getTabModelSelector();
             setTabContentManager(new TabContentManager(this, getContentOffsetProvider(),
-                    !SysUtils.isLowEndDevice(),
+                    !ContextUtils.getAppSharedPreferences().getBoolean(PrivacySettings.PREF_TABGRID_USE_ICONS, false),
                     tabModelSelector != null ? tabModelSelector::getTabById : null));
 
             getBrowserControlsManager().initialize(
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/compositor/layouts/content/TabContentManager.java b/chrome/android/java/src/org/chromium/chrome/browser/compositor/layouts/content/TabContentManager.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/compositor/layouts/content/TabContentManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/compositor/layouts/content/TabContentManager.java
@@ -331,9 +331,12 @@ public class TabContentManager {
      * @param forceUpdate Whether to obtain the thumbnail from the live content.
      * @param writeBack When {@code forceUpdate}, whether to write the thumbnail to cache.
      */
-    public void getTabThumbnailWithCallback(@NonNull int tabId, @NonNull Size thumbnailSize,
+    public void getTabThumbnailWithCallback(@NonNull int tabId, @NonNull Size thumbnailSize, //
             @NonNull Callback<Bitmap> callback, boolean forceUpdate, boolean writeBack) {
-        if (!mSnapshotsEnabled) return;
+        if (!mSnapshotsEnabled) {
+            callback.onResult(null);
+            return;
+        }
 
         // TODO(crbug/1444782): Remove forceUpdate and writeBack params from here and don't
         // trigger a captureThumbnail. This should be feasible once the
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -69,6 +69,11 @@ import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
 import org.chromium.components.browser_ui.settings.ManagedPreferenceDelegate;
 
+import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
+import org.chromium.chrome.browser.ui.messages.snackbar.INeedSnackbarManager;
+import org.chromium.chrome.browser.ui.messages.snackbar.Snackbar;
+import org.chromium.chrome.browser.ApplicationLifetime;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -77,7 +82,15 @@ import java.util.List;
  */
 public class PrivacySettings extends PreferenceFragmentCompat
         implements Preference.OnPreferenceChangeListener, FragmentHelpAndFeedbackLauncher,
-                   ProfileDependentSetting {
+                   ProfileDependentSetting, INeedSnackbarManager {
+    private SnackbarManager mSnackbarManager;
+    private Snackbar mSnackbar;
+
+    @Override
+    public void setSnackbarManager(SnackbarManager manager) {
+        mSnackbarManager = manager;
+    }
+
     private static final String PREF_CAN_MAKE_PAYMENT = "can_make_payment";
     private static final String PREF_PRELOAD_PAGES = "preload_pages";
     private static final String PREF_HTTPS_FIRST_MODE = "https_first_mode";
@@ -147,6 +160,21 @@ public class PrivacySettings extends PreferenceFragmentCompat
             });
         }
 
+        mSnackbar = Snackbar.make(getActivity().getString(R.string.ui_relaunch_notice),
+                new SnackbarManager.SnackbarController() {
+                        @Override
+                        public void onDismissNoAction(Object actionData) { }
+
+                        @Override
+                        public void onAction(Object actionData) {
+                                ApplicationLifetime.terminate(true);
+                        }
+                }, Snackbar.TYPE_NOTIFICATION, Snackbar.UMA_UNKNOWN)
+                .setSingleLine(false)
+                .setAction(getActivity().getString(R.string.relaunch),
+                        /*actionData*/null)
+                .setDuration(/*durationMs*/70000);
+
         Preference privacyGuidePreference = findPreference(PREF_PRIVACY_GUIDE);
         // Record the launch of PG from the S&P link-row entry point
         privacyGuidePreference.setOnPreferenceClickListener(preference -> {
@@ -297,6 +325,7 @@ public class PrivacySettings extends PreferenceFragmentCompat
 
     public static final String PREF_ALLOW_CUSTOM_TAB_INTENTS = "allow_custom_tab_intents";
     public static final String PREF_OPEN_EXTERNAL_LINKS_INCOGNITO = "open_external_links_incognito";
+    public static final String PREF_TABGRID_USE_ICONS = "tabgrid_use_icons";
 
     @Override
     public boolean onPreferenceChange(Preference preference, Object newValue) {
@@ -320,6 +349,13 @@ public class PrivacySettings extends PreferenceFragmentCompat
             SharedPreferences.Editor sharedPreferencesEditor = ContextUtils.getAppSharedPreferences().edit();
             sharedPreferencesEditor.putBoolean(PREF_OPEN_EXTERNAL_LINKS_INCOGNITO, (boolean)newValue);
             sharedPreferencesEditor.apply();
+        } else if (PREF_TABGRID_USE_ICONS.equals(key)) {
+            SharedPreferences.Editor sharedPreferencesEditor = ContextUtils.getAppSharedPreferences().edit();
+            sharedPreferencesEditor.putBoolean(PREF_TABGRID_USE_ICONS, (boolean)newValue);
+            sharedPreferencesEditor.apply();
+            if (!mSnackbarManager.isShowing()) {
+                mSnackbarManager.showSnackbar(mSnackbar);
+            }
         }
         return true;
     }
@@ -360,6 +396,10 @@ public class PrivacySettings extends PreferenceFragmentCompat
                             : R.string.text_off);
         }
 
+        Preference tabGridUseIcons =
+                (ChromeSwitchPreference) findPreference(PREF_TABGRID_USE_ICONS);
+        tabGridUseIcons.setOnPreferenceChangeListener(this);
+
         Preference refererPolicyPref = findPreference(PREF_REFERER_POLICY);
         refererPolicyPref.setSummary(
                 RefererSettingsFragment.getRefererSummaryString(getContext()));
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -5239,6 +5239,14 @@ To change this setting, <ph name="BEGIN_LINK">&lt;resetlink&gt;</ph>reset sync<p
         Your <ph name="FQDN">%1$s<ex>www.amazon.com</ex></ph> timer ran out. It'll start again tomorrow.
       </message>
 
+      <!-- Tab Broup Disable Thumbnail -->
+      <message name="IDS_TABGRID_USE_ICONS_TITLE" desc="Text for 'Use icons in the tab grid' settings-privacy option.">
+        Use only icons in the tab grid
+      </message>
+      <message name="IDS_TABGRID_USE_ICONS_SUMMARY" desc="Summary text for 'Use icons in the tab grid' settings-privacy option.">
+        Disable the saving of snapshots to disk
+      </message>
+
       <!-- Tab Group Tab Switcher strings -->
       <message name="IDS_TAB_MANAGEMENT_MODULE_TITLE" desc="Text shown when the Tab Management module is referenced in install start, success, failure UI (e.g. in IDS_MODULE_INSTALL_START_TEXT, which will expand to 'Installing Tab management for Chrome…').">
         Tab management
--
2.25.1
